{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet CustomerService = /*#__PURE__*/(() => {\n  class CustomerService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl;\n    }\n    // ðŸ”¹ Customers ------------------------------\n    // getCustomers(): Observable<any[]> {\n    //   return this.http.get<any[]>(`${this.baseUrl}/customers`).pipe(\n    //     map(customers =>\n    //       customers.map(c => ({\n    //         id: c.id,\n    //         firstName: c.first_name,\n    //         lastName: c.last_name,\n    //         phone: c.phone,\n    //         email: c.email,\n    //         address: c.address,\n    //         city: c.city,\n    //         state: c.state,\n    //         pin: c.pin,\n    //         accountType: c.account_type,\n    //         addressCount: c.address_count\n    //       }))\n    //     )\n    //   );\n    // }\n    getCustomers() {\n      return this.http.get(`${this.baseUrl}/customers`).pipe(map(customers => customers.map(c => ({\n        id: c.id,\n        firstName: c.firstName,\n        lastName: c.lastName,\n        phone: c.phone,\n        email: c.email,\n        city: c.city,\n        state: c.state,\n        pin: c.pin,\n        accountType: c.accountType,\n        addressCount: c.addressCount // âœ… key mapping\n      }))));\n    }\n\n    addCustomer(customer) {\n      const payload = {\n        first_name: customer.firstName,\n        last_name: customer.lastName,\n        phone: customer.phone,\n        email: customer.email,\n        address: customer.address,\n        city: customer.city,\n        state: customer.state,\n        pin: customer.pin,\n        account_type: customer.accountType\n      };\n      return this.http.post(`${this.baseUrl}/customers`, payload).pipe(map(c => ({\n        id: c.id,\n        firstName: c.first_name,\n        lastName: c.last_name,\n        phone: c.phone,\n        email: c.email,\n        address: c.address,\n        city: c.city,\n        state: c.state,\n        pin: c.pin,\n        accountType: c.account_type\n      })));\n    }\n    updateCustomer(id, customer) {\n      const payload = {\n        first_name: customer.firstName,\n        last_name: customer.lastName,\n        phone: customer.phone,\n        email: customer.email,\n        address: customer.address,\n        city: customer.city,\n        state: customer.state,\n        pin: customer.pin,\n        account_type: customer.accountType\n      };\n      return this.http.put(`${this.baseUrl}/customers/${id}`, payload).pipe(map(c => ({\n        id: c.id,\n        firstName: c.first_name,\n        lastName: c.last_name,\n        phone: c.phone,\n        email: c.email,\n        address: c.address,\n        city: c.city,\n        state: c.state,\n        pin: c.pin,\n        accountType: c.account_type\n      })));\n    }\n    //   deleteCustomer(id: string): Observable<any> {\n    //   return this.http.delete<any>(`${this.baseUrl}/${id}`);\n    // }\n    // // web-crud/service/customer.service.ts\n    // deleteCustomer(id: string) {\n    //   return this.http.delete(`${this.apiUrl}/customers/${id}`);\n    // }\n    // deleteAddress(addressId: number) {\n    //   return this.http.delete(`${this.apiUrl}/addresses/${addressId}`);\n    // }\n    // âœ… Delete customer (and all addresses via backend)\n    deleteCustomer(id) {\n      return this.http.delete(`${this.baseUrl}/customers/${id}`);\n    }\n    // âœ… Delete address\n    deleteAddress(addressId) {\n      return this.http.delete(`${this.baseUrl}/addresses/${addressId}`);\n    }\n    // ðŸ”¹ Addresses ------------------------------\n    getAddresses(customerId) {\n      return this.http.get(`${this.baseUrl}/customers/${customerId}/addresses`).pipe(map(addresses => addresses.map(a => ({\n        id: a.id,\n        customerId: a.customer_id,\n        addressLine: a.address_line,\n        city: a.city,\n        state: a.state,\n        pin: a.pin,\n        accountType: a.account_type\n      }))));\n    }\n    addAddress(customerId, address) {\n      const payload = {\n        address_line: address.addressLine,\n        city: address.city,\n        state: address.state,\n        pin: address.pin,\n        account_type: address.accountType\n      };\n      return this.http.post(`${this.baseUrl}/customers/${customerId}/addresses`, payload).pipe(map(a => ({\n        id: a.id,\n        customerId: a.customer_id,\n        addressLine: a.address_line,\n        city: a.city,\n        state: a.state,\n        pin: a.pin,\n        accountType: a.account_type\n      })));\n    }\n    updateAddress(addressId, address) {\n      const payload = {\n        address_line: address.addressLine,\n        city: address.city,\n        state: address.state,\n        pin: address.pin\n      };\n      return this.http.put(`${this.baseUrl}/addresses/${addressId}`, payload).pipe(map(a => ({\n        id: a.id,\n        customerId: a.customer_id,\n        addressLine: a.address_line,\n        city: a.city,\n        state: a.state,\n        pin: a.pin,\n        accountType: a.account_type\n      })));\n    }\n    // deleteAddress(addressId: number): Observable<any> {\n    //   return this.http.delete<any>(`${this.baseUrl}/addresses/${addressId}`);\n    // }\n    // ðŸ”¹ Address Status (Only One vs Multiple)\n    getAddressStatus(customerId) {\n      return this.http.get(`${this.baseUrl}/customers/${customerId}/address-status`);\n    }\n    // Customers with multiple addresses\n    getCustomersWithMultipleAddresses() {\n      return this.http.get(`${this.baseUrl}/customers/multiple-addresses`);\n    }\n    // Customers with only one address\n    getCustomersWithOneAddress() {\n      return this.http.get(`${this.baseUrl}/customers/only-one-address`);\n    }\n    // Search by city/state/pin\n    // searchCustomers(filters: any): Observable<any[]> {\n    //   return this.http.get<any[]>(`${this.baseUrl}/customers/search`, { params: filters });\n    // }\n    searchCustomers(filters) {\n      return this.http.get(`${this.baseUrl}/customers/search`, {\n        params: filters\n      }).pipe(map(customers => customers.map(c => ({\n        id: c.id,\n        firstName: c.firstName ?? c.first_name,\n        lastName: c.lastName ?? c.last_name,\n        phone: c.phone,\n        email: c.email,\n        address: c.addressLine ?? c.address,\n        city: c.city,\n        state: c.state,\n        pin: c.pin,\n        accountType: c.accountType ?? c.account_type,\n        addressCount: c.addressCount ?? c.address_count // âœ… fix here too\n      }))));\n    }\n\n    static {\n      this.Éµfac = function CustomerService_Factory(t) {\n        return new (t || CustomerService)(i0.ÉµÉµinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n        token: CustomerService,\n        factory: CustomerService.Éµfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return CustomerService;\n})();\nexport { CustomerService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}